@page "/"
@using System.ComponentModel.DataAnnotations
@using PocketMapApp.Services
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@using PocketMapApp.Models

<style>
    body {
        margin: 0;
        font-family: Arial, sans-serif;
    }

    .textSize {
        font-size: 15px;
        color: #40004b;
    }
</style>

<div class="container d-flex justify-content-center align-items-center vh-100">
    <div class="form-container bg-white p-4 rounded shadow" style="width: 400px; max-width: 90%;">
        <EditForm Model="@registerModel" OnValidSubmit="HandleRegistration">
            <DataAnnotationsValidator />
            <ValidationSummary />

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" style="color: #2e004f; border-color: #2e004f;">@errorMessage</div>
            }

            <h3 class="text-center mb-4" style="color: #2e004f;">Register</h3>

            <div class="mb-3">
                <label class="form-label" style="color: #2e004f;">Username:</label>
                <InputText @bind-Value="registerModel.Username" class="form-control" />
            </div>

            <div class="mb-3">
                <label class="form-label" style="color: #2e004f;">Password:</label>
                <InputText type="password" @bind-Value="registerModel.Password" class="form-control" />
            </div>

            <div class="mb-3">
                <label class="form-label" style="color: #2e004f;">Preferred Currency:</label>
                <InputSelect @bind-Value="registerModel.PreferredCurrency" class="form-control">
                    <option value="">Select a currency...</option>
                    <option value="NPR">Nepali Rupees (NPR)</option>
                    <option value="USD">US Dollar (USD)</option>
                    <option value="EUR">Euro (EUR)</option>
                    <option value="GBP">British Pound (GBP)</option>
                    <option value="JPY">Japanese Yen (JPY)</option>
                    <option value="CNY">Chinese Yuan (CNY)</option>
                    <option value="INR">Indian Rupee (INR)</option>
                    <option value="AUD">Australian Dollar (AUD)</option>
                    <option value="CAD">Canadian Dollar (CAD)</option>
                </InputSelect>
            </div>

            <button type="submit" class="btn" style="background-color: #2e004f; color: white; width: 100%;">Register</button>

            <h5 class="text-start mt-4 textSize" style="color: #2e004f;">
                Already have an account?
                <NavLink href="login" class="text-primary text-decoration-none">
                    Login here!
                </NavLink>
            </h5>
        </EditForm>
    </div>
</div>

@code {
    private RegisterModel registerModel = new(); //declare instance of register model to store form data
    private string errorMessage; //declare error message

    //method for handling registration
    private async Task HandleRegistration()
    {
        try
        {
            errorMessage = null; //clearing any existing error message

            //checking if the value is null or empty
            if (string.IsNullOrEmpty(registerModel.PreferredCurrency))
            {
                errorMessage = "Please select a preferred currency";
                return;
            }

            //calling register user method to register the user with provided details
            var result = await AuthService.RegisterUser(
                registerModel.Username,
                registerModel.Password,
                registerModel.PreferredCurrency);

            //if registration is successful
            if (result)
            {
                NavigationManager.NavigateTo("/login");
            }
            //error message
            else
            {
                errorMessage = "Username already exists";
            }
        }
        //logging any database related exceptions for debugging
        catch (DbUpdateException dbEx)
        {
            var innerMessage = dbEx.InnerException?.Message ?? dbEx.Message;
            errorMessage = $"Database error: {innerMessage}";
            Console.WriteLine($"Full error: {dbEx}");
        }
        //any general exceptions, innermost errors for debugging
        catch (Exception ex)
        {
            var innermost = ex;
            while (innermost.InnerException != null)
            {
                innermost = innermost.InnerException;
            }

            errorMessage = $"Error: {innermost.Message}";
            Console.WriteLine($"Full error chain: {ex}");
        }
    }
}