@page "/debtDetail"
@using PocketMapApp.Services
@using PocketMapApp.Models
@using PocketMapApp.Data
@using Microsoft.EntityFrameworkCore
@inject DebtService DebtService
@inject DatabaseContext DatabaseContext
@inject AuthStateService AuthState
@inject NavigationManager NavigationManager

<div class="container mt-4">
    <h2>Debt History</h2>

    <!-- Filters -->
    <div class="row mb-4">
        <div class="col-md-3">
            <label>Status:</label>
            <select class="form-select" @bind="selectedStatus">
                <option value="">All Status</option>
                <option value="pending">Pending</option>
                <option value="cleared">Cleared</option>
            </select>
        </div>
        <div class="col-md-3">
            <label>Due Date Range:</label>
            <select class="form-select" @bind="dateRange">
                <option value="all">All Time</option>
                <option value="overdue">Overdue</option>
                <option value="thisWeek">Due This Week</option>
                <option value="thisMonth">Due This Month</option>
            </select>
        </div>
        <div class="col-md-3">
            <label>Sort By:</label>
            <select class="form-select" @bind="sortBy">
                <option value="dueDate_asc">Due Date (Earliest First)</option>
                <option value="dueDate_desc">Due Date (Latest First)</option>
                <option value="amount_desc">Amount (Highest First)</option>
                <option value="amount_asc">Amount (Lowest First)</option>
            </select>
        </div>
    </div>

    <!-- Debts Table -->
    <div class="table-responsive">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Source</th>
                    <th>Amount</th>
                    <th>Due Date</th>
                    <th>Created Date</th>
                    <th>Status</th>
                    <th>Notes</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var debt in filteredDebts)
                {
                    <tr class="@GetRowClass(debt)">
                        <td>@debt.Source</td>
                        <td>@debt.Amount @AuthState.CurrentUser?.PreferredCurrency</td>
                        <td>
                            @debt.DueDate.ToShortDateString()
                            @if (IsOverdue(debt))
                            {
                                <span class="badge bg-danger ms-2">Overdue</span>
                            }
                        </td>
                        <td>@debt.CreatedDate.ToShortDateString()</td>
                        <td>
                            <span class="badge @(debt.IsCleared ? "bg-success" : "bg-warning")">
                                @(debt.IsCleared ? "Cleared" : "Pending")
                            </span>
                        </td>
                        <td>@debt.Notes</td>
                        <td>
                            @if (!debt.IsCleared)
                            {
                                <button class="btn btn-success btn-sm" @onclick="() => ClearDebt(debt.Id)">
                                    Clear Debt
                                </button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }
</div>

@code {
    private List<Debt> allDebts = new();
    private List<Debt> filteredDebts = new();
    private string selectedStatus = "";
    private string dateRange = "all";
    private string sortBy = "dueDate_asc";
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        if (AuthState.CurrentUser == null)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        await LoadDebts();
        ApplyFilters();
    }

    private async Task LoadDebts()
    {
        allDebts = await DatabaseContext.Debts
            .Where(d => d.UserId == AuthState.CurrentUser.Id)
            .OrderBy(d => d.DueDate)
            .ToListAsync();
    }

    private bool IsOverdue(Debt debt)
    {
        return !debt.IsCleared && debt.DueDate.Date < DateTime.Today;
    }

    private string GetRowClass(Debt debt)
    {
        if (debt.IsCleared)
            return "table-success";
        if (IsOverdue(debt))
            return "table-danger";
        return "table-warning";
    }

    private void ApplyFilters()
    {
        var query = allDebts.AsQueryable();

        //status
        query = selectedStatus switch
        {
            "pending" => query.Where(d => !d.IsCleared),
            "cleared" => query.Where(d => d.IsCleared),
            _ => query
        };

        //date range
        var today = DateTime.Today;
        query = dateRange switch
        {
            "overdue" => query.Where(d => !d.IsCleared && d.DueDate.Date < today),
            "thisWeek" => query.Where(d => d.DueDate.Date >= today && d.DueDate.Date <= today.AddDays(7)),
            "thisMonth" => query.Where(d => d.DueDate.Date >= today && d.DueDate.Date <= today.AddMonths(1)),
            _ => query
        };

        //sorting
        query = sortBy switch
        {
            "dueDate_asc" => query.OrderBy(d => d.DueDate),
            "dueDate_desc" => query.OrderByDescending(d => d.DueDate),
            "amount_asc" => query.OrderBy(d => d.Amount),
            "amount_desc" => query.OrderByDescending(d => d.Amount),
            _ => query.OrderBy(d => d.DueDate)
        };

        filteredDebts = query.ToList();
    }

    private async Task ClearDebt(int debtId)
    {
        var (success, error) = await DebtService.ClearDebt(debtId, AuthState.CurrentUser.Id);
        if (success)
        {
            await LoadDebts();
            ApplyFilters();
            errorMessage = "";
        }
        else
        {
            errorMessage = error;
        }
    }

    protected override void OnParametersSet()
    {
        ApplyFilters();
    }
}