@page "/transactionHistory"
@using PocketMapApp.Services
@using PocketMapApp.Models
@using PocketMapApp.Data
@using Microsoft.EntityFrameworkCore
@inject TransactionService TransactionService
@inject DatabaseContext DatabaseContext
@inject AuthStateService AuthState

<div class="container mt-4">
    <h2 class="mb-3">Transaction History</h2>

    <!-- search and filters-->
    <div class="row mb-4">
        <div class="col-md-2">
            <label>Search:</label>
            <input type="text" class="form-control" placeholder="search ..."
                   @bind-value="searchText" @bind-value:event="oninput" @onchange="ApplyFilters" />
        </div>
        <div class="col-md-2">
            <label>Type:</label>
            <select class="form-select" value="@selectedType" @onchange="@(e => FilterChanged("type", e.Value?.ToString()))">
                <option value="">All Types</option>
                <option value="Credit">Credit</option>
                <option value="Debit">Debit</option>
            </select>
        </div>
        <div class="col-md-2">
            <label>Date Range:</label>
            <select class="form-select" value="@dateRange" @onchange="@(e => FilterChanged("date", e.Value?.ToString()))">
                <option value="all">All Time</option>
                <option value="today">Today</option>
                <option value="week">This Week</option>
                <option value="month">This Month</option>
                <option value="year">This Year</option>
            </select>
        </div>
        <div class="col-md-2">
            <label>Tag:</label>
            <select class="form-select" value="@selectedTag" @onchange="@(e => FilterChanged("tag", e.Value?.ToString()))">
                <option value="">All Tags</option>
                @foreach (var tag in availableTags)
                {
                    <option value="@tag">@tag</option>
                }
            </select>
        </div>
        <div class="col-md-2">
            <label>Sort By:</label>
            <select class="form-select" value="@sortBy" @onchange="@(e => FilterChanged("sort", e.Value?.ToString()))">
                <option value="date_desc">Date (Newest First)</option>
                <option value="date_asc">Date (Oldest First)</option>
                <option value="amount_desc">Amount (Highest First)</option>
                <option value="amount_asc">Amount (Lowest First)</option>
            </select>
        </div>
    </div>

    <!-- transaction details table -->
    <div class="table-responsive">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Title</th>
                    <th>Type</th>
                    <th>Amount</th>
                    <th>Tags</th>
                    <th>Notes</th>
                </tr>
            </thead>
            <tbody>
                @if (filteredTransactions.Any())
                {
                    @foreach (var transaction in filteredTransactions)
                    {
                        //green background for credit transactions and red one for debit transactions
                        <tr class="@(transaction.Type == TransactionType.Credit ? "table-success" : "table-danger")">
                            <td>@transaction.Date.ToShortDateString()</td>
                            <td>@transaction.Title</td>
                            <td>@transaction.Type</td>
                            <td>@transaction.Amount @AuthState.CurrentUser?.PreferredCurrency</td>
                            <td>
                                @foreach (var tag in transaction.Tags)
                                {
                                    <span class="badge bg-secondary me-1">@tag</span> //displaying tags using badge
                                }
                            </td>
                            <td>@transaction.Notes</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="6" class="text-center">No transactions found matching the selected filters.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<Transaction> allTransactions = new(); //stores transactions of the user
    private List<Transaction> filteredTransactions = new(); // filtered transactions

    private List<string> availableTags = new(); //stores tags

    //variables for values selected in the filter
    private string selectedType = "";
    private string dateRange = "month";
    private string selectedTag = "";
    private string sortBy = "date_desc";

    //search input
    private string searchText = "";

    protected override async Task OnInitializedAsync()
    {
        //calling the methods
        await LoadTransactions();
        ExtractAvailableTags();
        ApplyFilters();
    }

    //method for loading transactions from the database
    private async Task LoadTransactions()
    {
        if (AuthState.CurrentUser != null)
        {
            allTransactions = await DatabaseContext.Transactions
                .Where(t => t.UserId == AuthState.CurrentUser.Id)
                .OrderByDescending(t => t.Date) //ordering by debt
                .ToListAsync();
        }
    }

    //method for getting tags of the transactions
    private void ExtractAvailableTags()
    {
        availableTags = allTransactions
            .SelectMany(t => t.Tags)
            .Distinct()
            .OrderBy(t => t)
            .ToList();
    }

    //method for getting filter values
    private void FilterChanged(string filterType, string value)
    {
        if (value == null) return;

        switch (filterType)
        {
            case "type":
                selectedType = value;
                break;
            case "date":
                dateRange = value;
                break;
            case "tag":
                selectedTag = value;
                break;
            case "sort":
                sortBy = value;
                break;
        }

        ApplyFilters(); //calling the apply filters method
        StateHasChanged(); //changing the state
    }

    //method for filters
    private void ApplyFilters()
    {
        var query = allTransactions.AsQueryable();

        //search
        if (!string.IsNullOrWhiteSpace(searchText))
        {
            query = query.Where(t => t.Title.Contains(searchText, StringComparison.OrdinalIgnoreCase));
        }

        //type
        if (!string.IsNullOrEmpty(selectedType))
        {
            var type = Enum.Parse<TransactionType>(selectedType);
            query = query.Where(t => t.Type == type);
        }

        //date
        var today = DateTime.Today;

        //using switch case for date filter
        switch (dateRange)
        {
            case "today":
                query = query.Where(t => t.Date.Date == today);
                break;
            case "week":
                var startOfWeek = today.AddDays(-(int)today.DayOfWeek);
                var endOfWeek = startOfWeek.AddDays(7);
                query = query.Where(t => t.Date.Date >= startOfWeek && t.Date.Date < endOfWeek);
                break;
            case "month":
                var startOfMonth = new DateTime(today.Year, today.Month, 1);
                var endOfMonth = startOfMonth.AddMonths(1);
                query = query.Where(t => t.Date.Date >= startOfMonth && t.Date.Date < endOfMonth);
                break;
            case "year":
                var startOfYear = new DateTime(today.Year, 1, 1);
                var endOfYear = startOfYear.AddYears(1);
                query = query.Where(t => t.Date.Date >= startOfYear && t.Date.Date < endOfYear);
                break;
        }

        //tag
        if (!string.IsNullOrEmpty(selectedTag))
        {
            query = query.Where(t => t.Tags.Contains(selectedTag));
        }

        //sorting
        query = sortBy switch
        {
            "date_asc" => query.OrderBy(t => t.Date),
            "date_desc" => query.OrderByDescending(t => t.Date),
            "amount_asc" => query.OrderBy(t => t.Amount),
            "amount_desc" => query.OrderByDescending(t => t.Amount),
            _ => query.OrderByDescending(t => t.Date)
        };

        filteredTransactions = query.ToList(); //filtered transactions list
    }
}