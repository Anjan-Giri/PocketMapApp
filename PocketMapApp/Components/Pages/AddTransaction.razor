@page "/add-transaction"
@using PocketMapApp.Services
@inject TransactionService TransactionService
@inject AuthStateService AuthState
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations
@using PocketMapApp.Models

<style>
    .purple-gradient {
        background: linear-gradient(to right, #ededed, #e8e8e8);
    }

    .form-control:focus, .form-select:focus {
        border-color: #30003b;
        box-shadow: 0 0 0 0.25rem rgba(20, 0, 24, 0.1);
    }
</style>

<div class="min-vh-100 bg-light py-5">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-8">
                <div class="card shadow border-0">
                    <div class="card-header purple-gradient border-0">
                        <h2 class="text-dark mb-2 mt-2">Add Transaction</h2>
                    </div>

                    <div class="card-body p-4">
                        <EditForm Model="@transactionModel" OnValidSubmit="HandleSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger mb-4" />

                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="alert alert-danger">@errorMessage</div>
                            }

                            <div class="mb-3">
                                <label class="form-label">Title:</label>
                                <InputText @bind-Value="transactionModel.Title" class="form-control" />
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md-6">
                                    <label class="form-label">Amount (@AuthState.CurrentUser?.PreferredCurrency):</label>
                                    <InputNumber @bind-Value="transactionModel.Amount" class="form-control" />
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Type:</label>
                                    <InputSelect @bind-Value="transactionModel.Type" class="form-select">
                                        <option value="@TransactionType.Credit">Credit</option>
                                        <option value="@TransactionType.Debit">Debit</option>
                                    </InputSelect>
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md-6">
                                    <label class="form-label">Date:</label>
                                    <InputDate @bind-Value="transactionModel.Date" class="form-control" />
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Tag:</label>
                                    <select class="form-select" value="@selectedTag" @onchange="OnTagSelectionChanged">
                                        <option value="">Select a tag</option>
                                        @foreach (var tag in DefaultTags)
                                        {
                                            <option value="@tag">@tag</option>
                                        }
                                        <option value="Other">Other</option>
                                    </select>
                                </div>
                            </div>

                            @if (showCustomTagInput)
                            {
                                <div class="mb-3">
                                    <label class="form-label">Custom Tag:</label>
                                    <input type="text" class="form-control" @bind="customTag" @bind:event="oninput" />
                                </div>
                            }

                            <div class="mb-3">
                                <label class="form-label">Notes:</label>
                                <InputTextArea @bind-Value="transactionModel.Notes" class="form-control" rows="4" />
                            </div>

                            <div class="d-flex justify-content-end mt-4">
                                <button type="submit" class="btn px-4 text-white" style="background-color: #30003b; border-color: #4338ca;">Add Transaction</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private TransactionModel transactionModel = new(); //declare transactionmodel to store form data
    private string errorMessage; //declare error message
    //private Dictionary<string, bool> selectedTags = new(); //declare dictionary to keep selected tag
    private string selectedTag = "";
    private string customTag = "";
    private bool showCustomTagInput = false;

    //list of default tags
    private List<string> DefaultTags = new()
    {
        "Monthly", "Food", "Drinks", "Clothes", "Gadgets",
        "Miscellaneous", "Fuel", "Rent", "EMI", "Party"
    };

    //initialize selected tag dictionary
    // protected override void OnInitialized()
    // {
    //     foreach (var tag in DefaultTags)
    //     {
    //         selectedTags[tag] = false; no tag is selected by default
    //     }
    // }

    private void OnTagSelectionChanged(ChangeEventArgs e)
    {
        selectedTag = e.Value?.ToString() ?? "";
        showCustomTagInput = selectedTag == "Other";
        if (!showCustomTagInput)
        {
            customTag = ""; // Clear custom tag when a predefined tag is selected
        }
        StateHasChanged(); // Ensure the UI updates
    }

    //method to gandle submission of form
    private async Task HandleSubmit()
    {
        try
        {
            string finalTag = selectedTag == "Other" ? customTag : selectedTag;

            // Validate custom tag if "Other" is selected
            if (selectedTag == "Other" && string.IsNullOrWhiteSpace(customTag))
            {
                errorMessage = "Please enter a custom tag";
                return;
            }

            //tranasaction object with provided values
            var transaction = new Transaction
                {
                    UserId = AuthState.CurrentUser.Id,
                    Title = transactionModel.Title,
                    Amount = transactionModel.Amount,
                    Type = transactionModel.Type,
                    Date = transactionModel.Date,
                    Notes = transactionModel.Notes,
                    //Tags = selectedTags.Where(t => t.Value).Select(t => t.Key).ToList() //selects tags whose value is true an converts to list
                    Tags = new List<string> { finalTag }
                };

            var (success, error) = await TransactionService.AddTransaction(transaction); //calling add transaction method
            //added successfully
            if (success)
            {
                NavigationManager.NavigateTo("/transactionHistory");
            }
            //failure
            else
            {
                errorMessage = error;
            }
        }
        //exceptions
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    public class TransactionModel
    {
        [Required]
        public string Title { get; set; }

        [Required]
        [Range(0.01, double.MaxValue, ErrorMessage = "Amount must be greater than 0")]
        public decimal Amount { get; set; }

        [Required]
        public TransactionType Type { get; set; }

        [Required]
        public DateTime Date { get; set; } = DateTime.Today;

        [StringLength(500)]
        public string Notes { get; set; }
    }
}
