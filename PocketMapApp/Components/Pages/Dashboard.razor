@page "/dashboard"
@inject NavigationManager NavigationManager
@using PocketMapApp.Services
@using PocketMapApp.Models
@using PocketMapApp.Data
@using Microsoft.EntityFrameworkCore
@inject TransactionService TransactionService
@inject DatabaseContext DatabaseContext
@inject AuthStateService AuthState

<style>
    .stat-card {
        border-radius: 8px;
        border: #000000 solid 2px;
        padding-top: 15px;
        padding-right: 15px;
        padding-left: 15px;
        height: auto;
        position: relative;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      }

        .stat-card:hover, .number-card:hover {
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.4);
            cursor: pointer;
        }

        .stat-card h3 {
            color: #001374;
            font-size: 15px;
            font-weight: 600;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .stat-card h2 {
            font-size: 20px;
            font-weight: 400;
            color: #060059;
            display: flex;
            align-items: center;
            justify-content: center;
        }
</style>

<h3 class="py-4 text-black">Welcome, @AuthState.CurrentUser?.Username!</h3>
<div class="dashboard-content">

    <!-- transaction summaries -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="stat-card border-primary">
                <h3>Balance</h3>
                <h2>@currentBalance.ToString("N2") @AuthState.CurrentUser?.PreferredCurrency</h2>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stat-card border-success">
                <h3 class="text-success">Credits</h3>
                <h2>@totalCredits.ToString("N2") @AuthState.CurrentUser?.PreferredCurrency</h2>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stat-card border-danger">
                <h3 class="text-danger">Debits</h3>
                <h2>@totalDebits.ToString("N2") @AuthState.CurrentUser?.PreferredCurrency</h2>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stat-card border-primary">
                <h3>Transactions Done</h3>
                <h2>@totalTransactions</h2>
            </div>
        </div>
    </div>


    <!-- debt summaries -->
    <div class="row mb-5">
        <div class="col-md-4">
            <div class="stat-card bg-warning border-light">
                <h3 class="text-white">Pending Debt</h3>
                <h2 class="text-white">@totalPendingDebt.ToString("N2") @AuthState.CurrentUser?.PreferredCurrency</h2>
            </div>
        </div>
        <div class="col-md-4">
            <div class="stat-card bg-danger border-light">
                <h3 class="text-white">Overdue Debt</h3>
                <h2 class="text-white">@overdueAmount.ToString("N2") @AuthState.CurrentUser?.PreferredCurrency</h2>
            </div>
        </div>
        <div class="col-md-4">
            <div class="stat-card bg-success border-light">
                <h3 class="text-white">Cleared Debt</h3>
                <h2 class="text-white">@totalClearedDebt.ToString("N2") @AuthState.CurrentUser?.PreferredCurrency</h2>
            </div>
        </div>
    </div>

    <!-- top transactions -->
    <div class="card mb-5">
        <div class="card-body">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h5 class="card-title mb-0">Top 5 Transactions</h5>
                <!-- filter for top transactions -->
                <select class="form-select w-auto" @onchange="OnFilterChanged">
                    <option value="highest">Highest Transactions</option>
                    <option value="lowest">Lowest Transactions</option>
                </select>
            </div>
            <!-- table of transactions -->
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Title</th>
                            <th>Amount</th>
                            <th>Type</th>
                            <th>Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var transaction in filteredTransactions)
                        {
                            <tr>
                                <td>@transaction.Title</td>
                                <td>@transaction.Amount.ToString("N2") @AuthState.CurrentUser?.PreferredCurrency</td>
                                <td>@transaction.Type</td>
                                <td>@transaction.Date.ToShortDateString()</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- pending debts -->
    <div class="card mb-5">
        <div class="card-body">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h5 class="card-title">Pending Debts</h5>
                <!-- filter for date range -->
                <div class="row g-2">
                    <div class="col-auto">
                        <input type="date" class="form-control" @bind="startDate" @bind:after="UpdateFilteredDebts" />
                    </div>
                    <div class="col-auto">
                        <input type="date" class="form-control" @bind="endDate" @bind:after="UpdateFilteredDebts" />
                    </div>
                </div>
            </div>

            <!-- table for pending debts -->
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Source</th>
                            <th>Amount</th>
                            <th>Due Date</th>
                            <th>Notes</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var debt in filteredDebts)
                        {
                            <tr>
                                <td>@debt.Source</td>
                                <td>@debt.Amount.ToString("N2") @AuthState.CurrentUser?.PreferredCurrency</td>
                                <td>@debt.DueDate.ToShortDateString()</td>
                                <td>@debt.Notes</td>
                            </tr>
                        }
                        @if (!filteredDebts.Any())
                        {
                            <tr>
                                <td colspan="4" class="text-center">No pending debts found in the selected date range</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- total transactions -->
    <div class="row mb-5 align-items-start justify-content-start">
        <div class="col-md-3">
            <div class="stat-card border-dark">
                <h3 class="text-dark">Total Transactions</h3>
                <h2>@netFlow.ToString("N2") @AuthState.CurrentUser?.PreferredCurrency</h2>
            </div>
        </div>
    </div>
</div>

@code {
    //fields for storing data
    private List<Transaction> allTransactions = new();
    private List<Debt> allDebts = new();
    private decimal currentBalance;
    private decimal totalCredits;
    private decimal totalDebits;
    private decimal totalPendingDebt;
    private decimal totalClearedDebt;
    private decimal overdueAmount;
    private int totalTransactions;
    private decimal netFlow;

    //fields for transaction filtering
    private List<Transaction> filteredTransactions = new();
    private string currentFilter = "highest";

    //fields for debt filtering
    private List<Debt> filteredDebts = new();
    private DateTime? startDate;
    private DateTime? endDate;

    //checking authentication
    protected override void OnInitialized()
    {
        if (AuthState.CurrentUser == null)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }
    }

    //method to load data
    protected override async Task OnInitializedAsync()
    {
        if (AuthState.CurrentUser != null)
        {
            //calling the methods
            await LoadData();
            CalculateSummaries();
            FilterTransactions();
            UpdateFilteredDebts();
        }
    }

    //loading data from the database
    private async Task LoadData()
    {
        //getting all transactions
        allTransactions = await DatabaseContext.Transactions
            .Where(t => t.UserId == AuthState.CurrentUser.Id)
            .ToListAsync();

        //getting all debts
        allDebts = await DatabaseContext.Debts
            .Where(d => d.UserId == AuthState.CurrentUser.Id)
            .ToListAsync();

        //calculating balance
        currentBalance = await TransactionService.GetBalance(AuthState.CurrentUser.Id);
        //getting total credits
        totalCredits = allTransactions
            .Where(t => t.Type == TransactionType.Credit)
            .Sum(t => t.Amount);
        //getting total debits
        totalDebits = allTransactions
            .Where(t => t.Type == TransactionType.Debit)
            .Sum(t => t.Amount);
    }

    //filtering transaction
    private void FilterTransactions()
    {
        filteredTransactions = currentFilter == "highest"
            ? allTransactions.OrderByDescending(t => t.Amount).Take(5).ToList()
            : allTransactions.OrderBy(t => t.Amount).Take(5).ToList();
    }

    //handling change in filter
    private void OnFilterChanged(ChangeEventArgs e)
    {
        currentFilter = e.Value?.ToString() ?? "highest";
        FilterTransactions();
    }

    //updating pending debts based on filter
    private void UpdateFilteredDebts()
    {
        filteredDebts = allDebts
            .Where(d => (!startDate.HasValue || d.DueDate.Date >= startDate.Value.Date) &&
                       (!endDate.HasValue || d.DueDate.Date <= endDate.Value.Date))
            .ToList();
    }

    //calculating summary values
    private void CalculateSummaries()
    {
        //pending debt total
        totalPendingDebt = allDebts
            .Where(d => !d.IsCleared)
            .Sum(d => d.Amount);

        //cleared debt total
        totalClearedDebt = allDebts
            .Where(d => d.IsCleared)
            .Sum(d => d.Amount);

        //overdue amount total
        overdueAmount = allDebts
            .Where(d => !d.IsCleared && d.DueDate.Date < DateTime.Today)
            .Sum(d => d.Amount);

        //total number of transactions
        totalTransactions = allTransactions.Count;

        // total transactions (credits + debts - debits)
        netFlow = totalCredits + totalPendingDebt - totalDebits;
    }
}