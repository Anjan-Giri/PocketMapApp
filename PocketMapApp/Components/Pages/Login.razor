@page "/login"
@using PocketMapApp.Services
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations

<style>
    body {
        margin: 0;
        font-family: Arial, sans-serif;
    }
    .textSize{
        font-size: 15px;
        color: #40004b;
    }
</style>

<div class="container d-flex justify-content-center align-items-center vh-100">
    <div class="form-container bg-white p-4 rounded shadow" style="width: 400px; max-width: 90%;">
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }

        <h3 class="text-center mb-4" style="color: #2e004f;">Login</h3>

        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />

            <div class="mb-3">
                <label class="form-label" style="color: #2e004f;">Username:</label>
                <InputText @bind-Value="loginModel.Username" class="form-control" />
            </div>

            <div class="mb-3">
                <label class="form-label" style="color: #2e004f;">Password:</label>
                <InputText type="password" @bind-Value="loginModel.Password" class="form-control" />
            </div>

            <button type="submit" class="btn" style="background-color: #2e004f; color: white; width: 100%;">Login</button>

            <h5 class="text-start mt-4 textSize" style="color: #2e004f;">
                Don't have an account?
                <NavLink href="/" class="text-primary text-decoration-none">
                    Register Now!
                </NavLink>
            </h5>
        </EditForm>
    </div>
</div>

@code {
    private LoginModel loginModel = new(); //new instance of loginmodel for storing form data
    private string errorMessage;

    //inject authstateservice which manages user authentication

    [Inject]

    private AuthStateService AuthState { get; set; }

    private async Task HandleLogin()
    {
        try
        {
            errorMessage = null; // Clear any previous error

            //calling authservice login method
            var user = await AuthService.LoginUser(
                loginModel.Username,
                loginModel.Password);

            if (user != null)
            {
                AuthState.SetUser(user); // if login is successful authstate is updated
                NavigationManager.NavigateTo("/dashboard"); //redirected to dashboard page after successful login
            }
            else
            {
                errorMessage = "Invalid username or password";
            }
        }
        catch (Exception ex)
        {
            //logging error for debugging
            errorMessage = "An error occurred during login. Please try again.";
            Console.WriteLine($"Login error: {ex}");
        }
    }

    //form data
    public class LoginModel
    {
        //required ensures that the fields cannot be empty
        [Required]
        public string Username { get; set; }

        [Required]
        public string Password { get; set; }
    }
}